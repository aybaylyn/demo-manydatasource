<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
    <!-- 加载jdbc.properties文件中的内容，jdbc.properties文件中key命名要有一定的特殊规则 -->
    <context:property-placeholder location="classpath:/*.properties"/>
    <!-- mvc 配置文件-->

    <import resource="spring-mvc.xml"/>


    <!-- 配置数据源 ，dbcp -->
    <bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver1}"/>
        <property name="url" value="${jdbc.url1}"/>
        <property name="username" value="${jdbc.username1}"/>
        <property name="password" value="${jdbc.password1}"/>
        <property name="maxActive" value="30"/>
        <property name="maxIdle" value="5"/>
    </bean>


    <bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver2}"/>
        <property name="url" value="${jdbc.url2}"/>
        <property name="username" value="${jdbc.username2}"/>
        <property name="password" value="${jdbc.password2}"/>
        <property name="maxActive" value="30"/>
        <property name="maxIdle" value="5"/>
    </bean>

    <!-- 动态数据库配置-->
    <bean id="dynamicDataSource" class="com.may.demo.danamicdatasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource1" value-ref="dataSource1"/>
                <entry key="dataSource2" value-ref="dataSource2"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource1"/>
    </bean>


    <!-- 动态数据源切换aop 先与事务的aop -->

    <bean id="dataSourceInterceptor" class="com.may.demo.danamicdatasource.DataSourceInterceptor"/>
    <aop:config>
        <aop:pointcut id="default"
                      expression="execution(* com.may.demo.service.*.*(..))"/>
        <aop:pointcut id="ds2" expression="execution(* com.may.demo.service.ds2..*.*(..))"/>
        <aop:pointcut id="ds1" expression="execution(* com.may.demo.service.ds1..*.*(..))"/>
        <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor">
            <aop:before pointcut-ref="default" method="setdataSource1"/>
            <aop:before pointcut-ref="ds2" method="setdataSource2"/>
            <aop:before pointcut-ref="ds1" method="setdataSource1"/>
        </aop:aspect>
    </aop:config>


    <!-- sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dynamicDataSource"/>
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mapper/Configuration.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.may.demo.repository"/><!---根据自己的项目路径配置 -->
    </bean>


    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>